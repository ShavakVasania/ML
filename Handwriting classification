import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf

from tensorflow import keras
from keras.layers import Conv2D, MaxPooling2D,Dropout, Flatten, Dense, Rescaling, BatchNormalization
from keras.models import Sequential
from keras.callbacks import EarlyStopping

batch_size = 32
img_height = 28
img_width = 28


train_ds = tf.keras.utils.image_dataset_from_directory(
  '/workspaces/108059501/image_classification/images',
  validation_split=0.2,
  subset="training",
  color_mode='grayscale',
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

val_ds = tf.keras.utils.image_dataset_from_directory(
  '/workspaces/108059501/image_classification/images',
  validation_split=0.2,
  subset="validation",
  color_mode = 'grayscale',
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

AUTOTUNE = tf.data.AUTOTUNE

train_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)

model = Sequential()
model.add(Rescaling(1./25, input_shape=(img_height,img_width,1)))
model.add(Conv2D(16, 3, activation='relu', padding='same'))
model.add(MaxPooling2D())
model.add(BatchNormalization())
model.add(Conv2D(32, 3, activation='relu', padding='same'))
model.add(MaxPooling2D())
model.add(BatchNormalization())
model.add(Conv2D(64, 3, activation='relu', padding='same'))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(26))

cbs = [EarlyStopping(patience=3, restore_best_weights=True)]

model.compile(optimizer='Adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=20,
    callbacks=cbs
)
